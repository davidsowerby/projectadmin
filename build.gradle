//noinspection GrPackage
buildscript {
    ext.kotlin_version = '1.0.5-2'
    repositories {
//        maven {
//            url 'https://oss.sonatype.org/content/repositories/snapshots'
//        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'eclipse-wtp'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
    id 'maven'
    id 'maven-publish'
}

apply plugin: 'kotlin'
apply plugin: "jacoco"

sourceCompatibility = '1.8'
version = '0.7.0.5'
group = 'uk.q3c.build'

testSets {
    integrationTest
}

ext.assertjVersion = '3.3.0'
ext.commonsLangVersion = '3.3.2'
ext.guavaVersion = '19.0'
ext.guiceVersion = '4.0'

repositories {
//    maven {
//        url 'https://oss.sonatype.org/content/repositories/snapshots'
//    }
    jcenter()
    mavenLocal()
}

dependencies {

    //Dependency Injection
    compile 'com.google.inject.extensions:guice-multibindings:' + guiceVersion

    //gitplus
    compile 'uk.q3c.build:gitplus:0.17.0.61'

    // kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //Logging
    compile 'org.slf4j:slf4j-api:1.7.5'

    //unit testing
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:3.2.0' // needed for Spock mocking
    testCompile 'org.objenesis:objenesis:2.2' // needed for Spock mocking
    testCompile 'uk.q3c:q3c-testUtil:0.9.0.140'
//    testCompile 'org.assertj:assertj-core:3.4.0'

    //utility
    compile 'com.google.guava:guava:' + guavaVersion
    compile 'org.apache.commons:commons-lang3:' + commonsLangVersion
    compile 'com.google.code.findbugs:annotations:3.0.0'

}


publishing {
    publications {
        mavenStuff(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

javadoc {
    failOnError = false
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

jacocoTestReport {
    reports {
        //XML required by coveralls and for the quality gate checks
        xml.enabled true
    }
}


